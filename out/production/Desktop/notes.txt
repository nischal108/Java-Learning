<------------  What actually is OOPS ? ------------>
 
OOPs stands for "Object-Oriented Programming." It's a programming paradigm that revolves around the concept of objects. In OOP, we model our programs based on real-world objects and their interactions.

To explain it with an example, let's consider a car. In the real world, a car has certain properties like color, model, and speed, and it can perform actions like starting, stopping, and moving. In OOP, we would represent a car as an "object" that has data (properties) and behavior (actions). The properties would be variables like "color" and "speed," and the behaviors would be methods like "start()" and "stop()".

By using OOP, we can create reusable and organized code because we can define classes (blueprints) that describe the structure of objects, and then create instances (actual objects) based on those classes.




<-------------   why is opps even needed ? ----------->
Object-Oriented Programming (OOP) is needed because it provides a powerful and organized approach to software development, making it easier to design, create, and maintain complex systems. OOP allows developers to model their programs based on real-world objects and their interactions, enhancing the clarity and understandability of code. By encapsulating data and methods within classes, OOP promotes data security and prevents unintended side effects. Additionally, OOP supports the concept of inheritance, enabling code reuse and the creation of hierarchies of classes. This leads to more efficient development, as developers can build upon existing classes rather than starting from scratch. Polymorphism in OOP enables flexible and generic programming, allowing objects of different classes to be treated uniformly. The abstraction provided by OOP helps manage complexity by focusing on essential aspects of a problem and hiding unnecessary details. Moreover, OOP facilitates team collaboration as different developers can work on separate classes without interfering with each other's work. In summary, OOP is essential because it promotes modularity, reusability, maintainability, and scalability, making software development more efficient and manageable in the long run.



-------------< what are classes and objects ? ---------->
Classes and objects are fundamental concepts in object-oriented programming (OOP):

1. **Class:** A class is a blueprint or template that defines the structure and behavior of objects. It acts as a blueprint for creating objects, specifying what data (attributes) the objects will hold and what actions (methods) they can perform. In simple terms, a class is like a blueprint for a particular type of object.

2. **Object:** An object is an instance of a class. It is a real-world representation of the class blueprint, created from the class. Each object has its own set of data (attributes) and can perform the actions (methods) defined in the class. Think of an object as an actual manifestation of the concepts and properties described in the class.

For example, let's consider a class called "Car." The class "Car" would define attributes like "make," "model," and "year," as well as methods like "start" and "stop." Once the class is defined, you can create multiple objects of the "Car" class, each representing a specific car with its unique make, model, and year. Each of these car objects can start and stop independently.



<-------------- creating class in java ---------->

    accessModifier Class className{
        //class body
    }

Access Modifier: The access modifier specifies  the visibility of the class, variables, and methods to other parts of the program. It can be one of four keywords: public, protected ( child can inherit from parents), private, or package-private (default) (everyone within package can use but not outside package). These modifiers control the accessibility of the class members from other classes or packages.

       // creating a class named person with variable named age 

       public class Person{
         int age = 49;
       }

       //creating the object of person
       Person Ram = new Person();
       Ram.age = 12;        //sets the age of ram object of person class as 12 but on the place where class is declared the value must be removed and ust written int age; only.

       //accessing the attribute of class from object Ram

       sout(Ram.age);             //prints 49




//note:::::::::::::::::

a java file can have only one public  and the main method is written inside the same class and the name of the file must match with the name of public class.

---> a single class can have many objects
---> creating an object from a class is known as instantiating.
